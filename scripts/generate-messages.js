#!/usr/bin/env node
// TODO: Rewrite as inlang plugin.
import * as fs from 'fs';
import * as path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const messagesPath = path.join(__dirname, '../src/lib/paraglide/messages.js');
const outputPath = path.join(__dirname, '../src/lib/messages.ts');

if (!fs.existsSync(messagesPath)) {
  console.error('Paraglide messages file not found at:', messagesPath);
  process.exit(1);
}

async function generateMessages() {
  // Dynamically import the paraglide messages
  const paraglideMessages = await import(messagesPath);
  
  // Get all message function names
  const messageKeys = Object.keys(paraglideMessages).filter(key => 
    typeof paraglideMessages[key] === 'function'
  );

  console.log('Found message keys:', messageKeys);

  // Generate nested object structure
  function createNestedObject(keys) {
    const result = {};
    
    keys.forEach(key => {
      const parts = key.split('.');
      let current = result;
      
      for (let i = 0; i < parts.length - 1; i++) {
        if (!current[parts[i]]) {
          current[parts[i]] = {};
        }
        current = current[parts[i]];
      }
      
      current[parts[parts.length - 1]] = key;
    });
    
    return result;
  }

  function generateObjectCode(obj, indent = 0) {
    const spaces = '  '.repeat(indent);
    const entries = Object.entries(obj);
    
    if (entries.length === 0) return '{}';
    
    const lines = entries.map(([key, value]) => {
      if (typeof value === 'string') {
        return `${spaces}  ${key}: paraglide["${value}"]`;
      } else {
        return `${spaces}  ${key}: ${generateObjectCode(value, indent + 1)}`;
      }
    });
    
    return `{\n${lines.join(',\n')}\n${spaces}}`;
  }

  const nestedMessages = createNestedObject(messageKeys);
  const objectCode = generateObjectCode(nestedMessages);

  // Generate named exports for each top-level namespace
  const namedExports = Object.keys(nestedMessages).map(key => 
    `export const ${key} = ${generateObjectCode(nestedMessages[key])};`
  ).join('\n');

  const generatedCode = `// This file is auto-generated by scripts/generate-messages.js
// Do not edit manually - changes will be overwritten

import * as paraglide from './paraglide/messages';

${namedExports}

export const m = ${objectCode};

export default m;
`;

  fs.writeFileSync(outputPath, generatedCode);
  console.log('Generated messages.ts successfully!');
}

generateMessages().catch(console.error);